{"version":3,"sources":["components/Footer.js","components/Header.js","components/Home.js","components/Education.js","components/Work.js","components/Project.js","App.js","serviceWorker.js","index.js"],"names":["Footer","Header","props","value","onClick","onChange","Home","Education","Work","Project","App","state","page","handlePageChange","bind","e","this","setState","target","console","log","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oOAEe,SAASA,IACpB,OACI,gDCFO,SAASC,EAAOC,GAC3B,OACI,6BACA,4BAAQC,MAAM,OAAOC,QAASF,EAAMG,UAApC,QADA,OAGA,4BAAQF,MAAM,YAAYC,QAASF,EAAMG,UAAzC,aAHA,OAKA,4BAAQF,MAAM,OAAOC,QAASF,EAAMG,UAApC,QALA,OAOA,4BAAQF,MAAM,UAAUC,QAASF,EAAMG,UAAvC,WAPA,QCFO,SAASC,IACxB,OACI,6BACI,+CCHO,SAASC,IACxB,OACI,6BACI,oDCHO,SAASC,IACxB,OACI,6BACI,+CCHO,SAASC,IACxB,OACI,6BACI,kD,ICuCOC,E,kDAlCb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXC,KAAO,QAET,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBALb,E,6DAQIC,GACfC,KAAKC,SAAS,CACZL,KAAOG,EAAEG,OAAOf,U,0CAOlBgB,QAAQC,IAAIJ,KAAKL,MAAMC,Q,+BAIvB,OACE,6BACM,kBAACX,EAAD,CAAQI,SAAUW,KAAKH,mBACH,SAAnBG,KAAKL,MAAMC,MAAkB,kBAACN,EAAD,MACV,cAAnBU,KAAKL,MAAMC,MAAuB,kBAACL,EAAD,MACd,SAApBS,KAAKL,MAAMC,MAAmB,kBAACJ,EAAD,MACV,YAApBQ,KAAKL,MAAMC,MAAsB,kBAACH,EAAD,MAClC,kBAACT,EAAD,W,GA7BMqB,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,a","file":"static/js/main.899e49f9.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Footer(){\n    return(\n        <h2>This is a Footer</h2>\n    )\n}","import React from 'react'\n\nexport default function Header(props){\n    return(\n        <div>\n        <button value=\"home\" onClick={props.onChange}>Home</button>\n        &nbsp;\n        <button value=\"education\" onClick={props.onChange}>Education</button>\n        &nbsp;\n        <button value=\"work\" onClick={props.onChange}>Work</button>\n        &nbsp;\n        <button value=\"project\" onClick={props.onChange}>Project</button>\n        &nbsp;\n        </div>\n    )\n}","import React from 'react'\n\nexport default function Home(){\nreturn(\n    <div>\n        <h1>Home Component</h1>\n    </div>\n)\n}","import React from 'react'\n\nexport default function Education(){\nreturn(\n    <div>\n        <h1>Education Component</h1>\n    </div>\n)\n}","import React from 'react'\n\nexport default function Work(){\nreturn(\n    <div>\n        <h1>Work Component</h1>\n    </div>\n)\n}","import React from 'react'\n\nexport default function Project(){\nreturn(\n    <div>\n        <h1>Project Component</h1>\n    </div>\n)\n}","import React from 'react'\nimport Footer from './components/Footer'\nimport Header from './components/Header'\nimport Home from './components/Home'\nimport Education from './components/Education'\nimport Work from './components/Work'\nimport Project from './components/Project'\n\n\nclass App extends React.Component{\n  constructor(){\n    super()\n    this.state = {\n      page : \"home\"\n    }\n    this.handlePageChange = this.handlePageChange.bind(this)\n  }\n  \n  handlePageChange(e){\n    this.setState({\n      page : e.target.value\n    })\n    //console.log(\"Button pressed\")\n    //console.log(this.state.page)\n  }\n\n  componentDidMount(){\n    console.log(this.state.page)\n  }\n\n  render(){\n    return(\n      <div>\n            <Header onChange={this.handlePageChange}/>\n            {this.state.page ===\"home\" && <Home/>}\n            {this.state.page ===\"education\" && <Education/> }\n            {this.state.page === \"work\" && <Work/>}\n            {this.state.page === \"project\" && <Project/>}\n            <Footer/>\n      </div>\n    )\n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}